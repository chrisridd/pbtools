// Copyright 2024 Chris Ridd <chrisridd@mac.com>. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//    * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

use clap::{command, value_parser, Arg, ArgAction, ArgGroup, crate_authors, crate_version};
use image::{ImageError, Rgb, RgbImage};
use std::fmt::{Display, Formatter};
use std::fs::File;
use std::io;
use std::io::{BufReader, Error, Read};
use std::path::PathBuf;

fn pixel_to_rgb(pixel: u8) -> Rgb<u8> {
    match pixel {
        0x00u8 => Rgb([0x01u8, 0x00u8, 0x03u8]),
        0x01u8 => Rgb([0x02u8, 0x01u8, 0x07u8]),
        0x02u8 => Rgb([0x03u8, 0x01u8, 0x0bu8]),
        0x03u8 => Rgb([0x05u8, 0x02u8, 0x0fu8]),
        0x04u8 => Rgb([0x06u8, 0x03u8, 0x13u8]),
        0x05u8 => Rgb([0x07u8, 0x03u8, 0x18u8]),
        0x06u8 => Rgb([0x09u8, 0x04u8, 0x1bu8]),
        0x07u8 => Rgb([0x0au8, 0x05u8, 0x20u8]),
        0x08u8 => Rgb([0x0bu8, 0x05u8, 0x24u8]),
        0x09u8 => Rgb([0x0du8, 0x06u8, 0x28u8]),
        0x0au8 => Rgb([0x0eu8, 0x07u8, 0x2cu8]),
        0x0bu8 => Rgb([0x0fu8, 0x07u8, 0x30u8]),
        0x0cu8 => Rgb([0x11u8, 0x08u8, 0x34u8]),
        0x0du8 => Rgb([0x12u8, 0x09u8, 0x38u8]),
        0x0eu8 => Rgb([0x13u8, 0x09u8, 0x3cu8]),
        0x0fu8 => Rgb([0x15u8, 0x0au8, 0x40u8]),

        0x10u8 => Rgb([0x16u8, 0x0bu8, 0x44u8]),
        0x11u8 => Rgb([0x18u8, 0x0bu8, 0x48u8]),
        0x12u8 => Rgb([0x19u8, 0x0cu8, 0x4cu8]),
        0x13u8 => Rgb([0x1au8, 0x0du8, 0x51u8]),
        0x14u8 => Rgb([0x1cu8, 0x0du8, 0x55u8]),
        0x15u8 => Rgb([0x1du8, 0x0eu8, 0x59u8]),
        0x16u8 => Rgb([0x1eu8, 0x0fu8, 0x5du8]),
        0x17u8 => Rgb([0x20u8, 0x0fu8, 0x61u8]),
        0x18u8 => Rgb([0x21u8, 0x10u8, 0x65u8]),
        0x19u8 => Rgb([0x22u8, 0x11u8, 0x69u8]),
        0x1au8 => Rgb([0x24u8, 0x11u8, 0x6du8]),
        0x1bu8 => Rgb([0x25u8, 0x12u8, 0x6fu8]),
        0x1cu8 => Rgb([0x27u8, 0x13u8, 0x72u8]),
        0x1du8 => Rgb([0x28u8, 0x14u8, 0x74u8]),
        0x1eu8 => Rgb([0x2au8, 0x14u8, 0x76u8]),
        0x1fu8 => Rgb([0x2bu8, 0x15u8, 0x78u8]),

        0x20u8 => Rgb([0x2du8, 0x16u8, 0x79u8]),
        0x21u8 => Rgb([0x2fu8, 0x17u8, 0x7bu8]),
        0x22u8 => Rgb([0x30u8, 0x18u8, 0x7cu8]),
        0x23u8 => Rgb([0x32u8, 0x19u8, 0x7du8]),
        0x24u8 => Rgb([0x34u8, 0x19u8, 0x7eu8]),
        0x25u8 => Rgb([0x35u8, 0x1au8, 0x7fu8]),
        0x26u8 => Rgb([0x37u8, 0x1bu8, 0x80u8]),
        0x27u8 => Rgb([0x39u8, 0x1cu8, 0x80u8]),
        0x28u8 => Rgb([0x3bu8, 0x1du8, 0x81u8]),
        0x29u8 => Rgb([0x3cu8, 0x1eu8, 0x82u8]),
        0x2au8 => Rgb([0x3eu8, 0x1fu8, 0x82u8]),
        0x2bu8 => Rgb([0x40u8, 0x1fu8, 0x83u8]),
        0x2cu8 => Rgb([0x42u8, 0x20u8, 0x83u8]),
        0x2du8 => Rgb([0x43u8, 0x21u8, 0x84u8]),
        0x2eu8 => Rgb([0x45u8, 0x22u8, 0x84u8]),
        0x2fu8 => Rgb([0x47u8, 0x23u8, 0x85u8]),

        0x30u8 => Rgb([0x49u8, 0x24u8, 0x85u8]),
        0x31u8 => Rgb([0x4bu8, 0x25u8, 0x86u8]),
        0x32u8 => Rgb([0x4du8, 0x26u8, 0x86u8]),
        0x33u8 => Rgb([0x4eu8, 0x27u8, 0x86u8]),
        0x34u8 => Rgb([0x50u8, 0x28u8, 0x87u8]),
        0x35u8 => Rgb([0x52u8, 0x29u8, 0x87u8]),
        0x36u8 => Rgb([0x54u8, 0x29u8, 0x87u8]),
        0x37u8 => Rgb([0x56u8, 0x2au8, 0x87u8]),
        0x38u8 => Rgb([0x58u8, 0x2bu8, 0x88u8]),
        0x39u8 => Rgb([0x59u8, 0x2cu8, 0x88u8]),
        0x3au8 => Rgb([0x5bu8, 0x2du8, 0x88u8]),
        0x3bu8 => Rgb([0x5du8, 0x2eu8, 0x89u8]),
        0x3cu8 => Rgb([0x5fu8, 0x2fu8, 0x89u8]),
        0x3du8 => Rgb([0x61u8, 0x30u8, 0x89u8]),
        0x3eu8 => Rgb([0x63u8, 0x31u8, 0x89u8]),
        0x3fu8 => Rgb([0x65u8, 0x32u8, 0x89u8]),

        0x40u8 => Rgb([0x66u8, 0x33u8, 0x89u8]),
        0x41u8 => Rgb([0x68u8, 0x34u8, 0x8au8]),
        0x42u8 => Rgb([0x6au8, 0x35u8, 0x8au8]),
        0x43u8 => Rgb([0x6cu8, 0x36u8, 0x8au8]),
        0x44u8 => Rgb([0x6eu8, 0x36u8, 0x8au8]),
        0x45u8 => Rgb([0x70u8, 0x37u8, 0x8au8]),
        0x46u8 => Rgb([0x72u8, 0x38u8, 0x8au8]),
        0x47u8 => Rgb([0x74u8, 0x39u8, 0x8bu8]),
        0x48u8 => Rgb([0x75u8, 0x3au8, 0x8bu8]),
        0x49u8 => Rgb([0x77u8, 0x3bu8, 0x8bu8]),
        0x4au8 => Rgb([0x79u8, 0x3cu8, 0x8bu8]),
        0x4bu8 => Rgb([0x7bu8, 0x3du8, 0x8bu8]),
        0x4cu8 => Rgb([0x7du8, 0x3eu8, 0x8bu8]),
        0x4du8 => Rgb([0x7fu8, 0x3fu8, 0x8bu8]),
        0x4eu8 => Rgb([0x80u8, 0x40u8, 0x8cu8]),
        0x4fu8 => Rgb([0x82u8, 0x41u8, 0x8cu8]),

        0x50u8 => Rgb([0x84u8, 0x42u8, 0x8cu8]),
        0x51u8 => Rgb([0x85u8, 0x43u8, 0x8cu8]),
        0x52u8 => Rgb([0x86u8, 0x44u8, 0x8du8]),
        0x53u8 => Rgb([0x88u8, 0x45u8, 0x8du8]),
        0x54u8 => Rgb([0x89u8, 0x46u8, 0x8du8]),
        0x55u8 => Rgb([0x8au8, 0x47u8, 0x8eu8]),
        0x56u8 => Rgb([0x8bu8, 0x48u8, 0x8eu8]),
        0x57u8 => Rgb([0x8cu8, 0x4au8, 0x8fu8]),
        0x58u8 => Rgb([0x8du8, 0x4bu8, 0x8fu8]),
        0x59u8 => Rgb([0x8eu8, 0x4cu8, 0x8fu8]),
        0x5au8 => Rgb([0x8eu8, 0x4du8, 0x90u8]),
        0x5bu8 => Rgb([0x8fu8, 0x4eu8, 0x90u8]),
        0x5cu8 => Rgb([0x90u8, 0x50u8, 0x91u8]),
        0x5du8 => Rgb([0x90u8, 0x51u8, 0x91u8]),
        0x5eu8 => Rgb([0x91u8, 0x52u8, 0x91u8]),
        0x5fu8 => Rgb([0x91u8, 0x54u8, 0x92u8]),

        0x60u8 => Rgb([0x92u8, 0x55u8, 0x92u8]),
        0x61u8 => Rgb([0x92u8, 0x56u8, 0x92u8]),
        0x62u8 => Rgb([0x92u8, 0x58u8, 0x93u8]),
        0x63u8 => Rgb([0x93u8, 0x59u8, 0x93u8]),
        0x64u8 => Rgb([0x93u8, 0x5bu8, 0x93u8]),
        0x65u8 => Rgb([0x93u8, 0x5cu8, 0x93u8]),
        0x66u8 => Rgb([0x93u8, 0x5eu8, 0x93u8]),
        0x67u8 => Rgb([0x93u8, 0x5fu8, 0x93u8]),
        0x68u8 => Rgb([0x93u8, 0x61u8, 0x93u8]),
        0x69u8 => Rgb([0x93u8, 0x62u8, 0x93u8]),
        0x6au8 => Rgb([0x93u8, 0x64u8, 0x93u8]),
        0x6bu8 => Rgb([0x93u8, 0x65u8, 0x93u8]),
        0x6cu8 => Rgb([0x93u8, 0x67u8, 0x93u8]),
        0x6du8 => Rgb([0x93u8, 0x68u8, 0x93u8]),
        0x6eu8 => Rgb([0x93u8, 0x6au8, 0x93u8]),
        0x6fu8 => Rgb([0x93u8, 0x6cu8, 0x93u8]),

        0x70u8 => Rgb([0x93u8, 0x6du8, 0x93u8]),
        0x71u8 => Rgb([0x93u8, 0x6fu8, 0x93u8]),
        0x72u8 => Rgb([0x93u8, 0x70u8, 0x93u8]),
        0x73u8 => Rgb([0x93u8, 0x72u8, 0x93u8]),
        0x74u8 => Rgb([0x93u8, 0x73u8, 0x93u8]),
        0x75u8 => Rgb([0x93u8, 0x75u8, 0x93u8]),
        0x76u8 => Rgb([0x93u8, 0x76u8, 0x93u8]),
        0x77u8 => Rgb([0x93u8, 0x78u8, 0x93u8]),
        0x78u8 => Rgb([0x93u8, 0x7au8, 0x93u8]),
        0x79u8 => Rgb([0x93u8, 0x7bu8, 0x93u8]),
        0x7au8 => Rgb([0x93u8, 0x7du8, 0x93u8]),
        0x7bu8 => Rgb([0x93u8, 0x7eu8, 0x93u8]),
        0x7cu8 => Rgb([0x93u8, 0x80u8, 0x93u8]),
        0x7du8 => Rgb([0x93u8, 0x82u8, 0x93u8]),
        0x7eu8 => Rgb([0x93u8, 0x83u8, 0x93u8]),
        0x7fu8 => Rgb([0x93u8, 0x85u8, 0x93u8]),

        0x80u8 => Rgb([0x93u8, 0x86u8, 0x93u8]),
        0x81u8 => Rgb([0x93u8, 0x88u8, 0x93u8]),
        0x82u8 => Rgb([0x93u8, 0x8au8, 0x93u8]),
        0x83u8 => Rgb([0x93u8, 0x8bu8, 0x93u8]),
        0x84u8 => Rgb([0x93u8, 0x8du8, 0x93u8]),
        0x85u8 => Rgb([0x93u8, 0x8eu8, 0x93u8]),
        0x86u8 => Rgb([0x93u8, 0x90u8, 0x93u8]),
        0x87u8 => Rgb([0x93u8, 0x92u8, 0x93u8]),
        0x88u8 => Rgb([0x93u8, 0x93u8, 0x93u8]),
        0x89u8 => Rgb([0x93u8, 0x95u8, 0x93u8]),
        0x8au8 => Rgb([0x93u8, 0x96u8, 0x93u8]),
        0x8bu8 => Rgb([0x93u8, 0x98u8, 0x93u8]),
        0x8cu8 => Rgb([0x93u8, 0x9au8, 0x93u8]),
        0x8du8 => Rgb([0x93u8, 0x9bu8, 0x93u8]),
        0x8eu8 => Rgb([0x93u8, 0x9du8, 0x93u8]),
        0x8fu8 => Rgb([0x93u8, 0x9eu8, 0x93u8]),

        0x90u8 => Rgb([0x93u8, 0xa0u8, 0x93u8]),
        0x91u8 => Rgb([0x93u8, 0xa2u8, 0x93u8]),
        0x92u8 => Rgb([0x93u8, 0xa3u8, 0x93u8]),
        0x93u8 => Rgb([0x93u8, 0xa5u8, 0x93u8]),
        0x94u8 => Rgb([0x93u8, 0xa7u8, 0x93u8]),
        0x95u8 => Rgb([0x93u8, 0xa8u8, 0x93u8]),
        0x96u8 => Rgb([0x93u8, 0xaau8, 0x93u8]),
        0x97u8 => Rgb([0x93u8, 0xabu8, 0x93u8]),
        0x98u8 => Rgb([0x93u8, 0xadu8, 0x93u8]),
        0x99u8 => Rgb([0x93u8, 0xafu8, 0x93u8]),
        0x9au8 => Rgb([0x93u8, 0xb0u8, 0x93u8]),
        0x9bu8 => Rgb([0x93u8, 0xb2u8, 0x93u8]),
        0x9cu8 => Rgb([0x93u8, 0xb3u8, 0x93u8]),
        0x9du8 => Rgb([0x93u8, 0xb5u8, 0x93u8]),
        0x9eu8 => Rgb([0x93u8, 0xb6u8, 0x93u8]),
        0x9fu8 => Rgb([0x94u8, 0xb7u8, 0x94u8]),

        0xa0u8 => Rgb([0x94u8, 0xb9u8, 0x94u8]),
        0xa1u8 => Rgb([0x94u8, 0xbau8, 0x94u8]),
        0xa2u8 => Rgb([0x95u8, 0xbbu8, 0x94u8]),
        0xa3u8 => Rgb([0x95u8, 0xbdu8, 0x95u8]),
        0xa4u8 => Rgb([0x95u8, 0xbeu8, 0x95u8]),
        0xa5u8 => Rgb([0x96u8, 0xbfu8, 0x96u8]),
        0xa6u8 => Rgb([0x96u8, 0xc0u8, 0x96u8]),
        0xa7u8 => Rgb([0x97u8, 0xc1u8, 0x96u8]),
        0xa8u8 => Rgb([0x97u8, 0xc2u8, 0x97u8]),
        0xa9u8 => Rgb([0x98u8, 0xc3u8, 0x97u8]),
        0xaau8 => Rgb([0x99u8, 0xc4u8, 0x98u8]),
        0xabu8 => Rgb([0x99u8, 0xc5u8, 0x98u8]),
        0xacu8 => Rgb([0x9au8, 0xc6u8, 0x98u8]),
        0xadu8 => Rgb([0x9bu8, 0xc7u8, 0x99u8]),
        0xaeu8 => Rgb([0x9cu8, 0xc8u8, 0x99u8]),
        0xafu8 => Rgb([0x9du8, 0xc9u8, 0x99u8]),

        0xb0u8 => Rgb([0x9eu8, 0xcau8, 0x9au8]),
        0xb1u8 => Rgb([0x9fu8, 0xcbu8, 0x9au8]),
        0xb2u8 => Rgb([0xa0u8, 0xcbu8, 0x9au8]),
        0xb3u8 => Rgb([0xa1u8, 0xccu8, 0x9au8]),
        0xb4u8 => Rgb([0xa2u8, 0xcdu8, 0x9au8]),
        0xb5u8 => Rgb([0xa3u8, 0xceu8, 0x9au8]),
        0xb6u8 => Rgb([0xa5u8, 0xceu8, 0x9bu8]),
        0xb7u8 => Rgb([0xa6u8, 0xcfu8, 0x9bu8]),
        0xb8u8 => Rgb([0xa7u8, 0xd0u8, 0x9bu8]),
        0xb9u8 => Rgb([0xa8u8, 0xd0u8, 0x9bu8]),
        0xbau8 => Rgb([0xa9u8, 0xd1u8, 0x9bu8]),
        0xbbu8 => Rgb([0xabu8, 0xd2u8, 0x9bu8]),
        0xbcu8 => Rgb([0xacu8, 0xd3u8, 0x9bu8]),
        0xbdu8 => Rgb([0xadu8, 0xd4u8, 0x9cu8]),
        0xbeu8 => Rgb([0xaeu8, 0xd4u8, 0x9cu8]),
        0xbfu8 => Rgb([0xb0u8, 0xd5u8, 0x9cu8]),

        0xc0u8 => Rgb([0xb1u8, 0xd6u8, 0x9cu8]),
        0xc1u8 => Rgb([0xb2u8, 0xd7u8, 0x9cu8]),
        0xc2u8 => Rgb([0xb4u8, 0xd7u8, 0x9cu8]),
        0xc3u8 => Rgb([0xb5u8, 0xd8u8, 0x9du8]),
        0xc4u8 => Rgb([0xb6u8, 0xd9u8, 0x9du8]),
        0xc5u8 => Rgb([0xb8u8, 0xdau8, 0x9du8]),
        0xc6u8 => Rgb([0xb9u8, 0xdau8, 0x9du8]),
        0xc7u8 => Rgb([0xbau8, 0xdbu8, 0x9du8]),
        0xc8u8 => Rgb([0xbcu8, 0xdcu8, 0x9eu8]),
        0xc9u8 => Rgb([0xbdu8, 0xddu8, 0x9eu8]),
        0xcau8 => Rgb([0xbeu8, 0xddu8, 0x9eu8]),
        0xcbu8 => Rgb([0xc0u8, 0xdeu8, 0x9eu8]),
        0xccu8 => Rgb([0xc1u8, 0xdfu8, 0x9fu8]),
        0xcdu8 => Rgb([0xc3u8, 0xe0u8, 0x9fu8]),
        0xceu8 => Rgb([0xc4u8, 0xe0u8, 0x9fu8]),
        0xcfu8 => Rgb([0xc5u8, 0xe1u8, 0xa0u8]),

        0xd0u8 => Rgb([0xc7u8, 0xe2u8, 0xa0u8]),
        0xd1u8 => Rgb([0xc8u8, 0xe3u8, 0xa0u8]),
        0xd2u8 => Rgb([0xcau8, 0xe3u8, 0xa1u8]),
        0xd3u8 => Rgb([0xcbu8, 0xe4u8, 0xa1u8]),
        0xd4u8 => Rgb([0xccu8, 0xe5u8, 0xa2u8]),
        0xd5u8 => Rgb([0xceu8, 0xe6u8, 0xa2u8]),
        0xd6u8 => Rgb([0xcfu8, 0xe6u8, 0xa3u8]),
        0xd7u8 => Rgb([0xd1u8, 0xe7u8, 0xa3u8]),
        0xd8u8 => Rgb([0xd2u8, 0xe8u8, 0xa4u8]),
        0xd9u8 => Rgb([0xd3u8, 0xe9u8, 0xa4u8]),
        0xdau8 => Rgb([0xd5u8, 0xe9u8, 0xa5u8]),
        0xdbu8 => Rgb([0xd6u8, 0xeau8, 0xa6u8]),
        0xdcu8 => Rgb([0xd8u8, 0xebu8, 0xa7u8]),
        0xddu8 => Rgb([0xd9u8, 0xecu8, 0xa8u8]),
        0xdeu8 => Rgb([0xdau8, 0xecu8, 0xa9u8]),
        0xdfu8 => Rgb([0xdcu8, 0xedu8, 0xaau8]),

        0xe0u8 => Rgb([0xddu8, 0xeeu8, 0xabu8]),
        0xe1u8 => Rgb([0xdeu8, 0xeeu8, 0xacu8]),
        0xe2u8 => Rgb([0xdfu8, 0xefu8, 0xadu8]),
        0xe3u8 => Rgb([0xe1u8, 0xf0u8, 0xafu8]),
        0xe4u8 => Rgb([0xe2u8, 0xf0u8, 0xb1u8]),
        0xe5u8 => Rgb([0xe3u8, 0xf1u8, 0xb3u8]),
        0xe6u8 => Rgb([0xe4u8, 0xf1u8, 0xb5u8]),
        0xe7u8 => Rgb([0xe5u8, 0xf2u8, 0xb8u8]),
        0xe8u8 => Rgb([0xe6u8, 0xf2u8, 0xbau8]),
        0xe9u8 => Rgb([0xe7u8, 0xf3u8, 0xbdu8]),
        0xeau8 => Rgb([0xe8u8, 0xf3u8, 0xbfu8]),
        0xebu8 => Rgb([0xe9u8, 0xf4u8, 0xc2u8]),
        0xecu8 => Rgb([0xeau8, 0xf5u8, 0xc5u8]),
        0xedu8 => Rgb([0xebu8, 0xf5u8, 0xc7u8]),
        0xeeu8 => Rgb([0xecu8, 0xf6u8, 0xcau8]),
        0xefu8 => Rgb([0xedu8, 0xf6u8, 0xcdu8]),

        0xf0u8 => Rgb([0xefu8, 0xf7u8, 0xd0u8]),
        0xf1u8 => Rgb([0xf0u8, 0xf7u8, 0xd3u8]),
        0xf2u8 => Rgb([0xf1u8, 0xf8u8, 0xd6u8]),
        0xf3u8 => Rgb([0xf2u8, 0xf8u8, 0xd9u8]),
        0xf4u8 => Rgb([0xf3u8, 0xf9u8, 0xdcu8]),
        0xf5u8 => Rgb([0xf4u8, 0xf9u8, 0xdfu8]),
        0xf6u8 => Rgb([0xf5u8, 0xfau8, 0xe2u8]),
        0xf7u8 => Rgb([0xf6u8, 0xfbu8, 0xe5u8]),
        0xf8u8 => Rgb([0xf7u8, 0xfbu8, 0xe8u8]),
        0xf9u8 => Rgb([0xf8u8, 0xfcu8, 0xebu8]),
        0xfau8 => Rgb([0xf9u8, 0xfcu8, 0xeeu8]),
        0xfbu8 => Rgb([0xfau8, 0xfdu8, 0xf2u8]),
        0xfcu8 => Rgb([0xfcu8, 0xfdu8, 0xf5u8]),
        0xfdu8 => Rgb([0xfdu8, 0xfeu8, 0xf8u8]),
        0xfeu8 => Rgb([0xfeu8, 0xfeu8, 0xfbu8]),
        0xffu8 => Rgb([0xc9u8, 0xc9u8, 0xb9u8]),
    }
}

/// Application error handling
enum ConvertError {
    IO(Error),
    Format(String),
    Image(ImageError),
}

impl Display for ConvertError {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        match self {
            ConvertError::IO(e) => writeln!(f, "I/O error: {}", e),
            ConvertError::Format(s) => writeln!(f, "Bad format: {}", s),
            ConvertError::Image(e) => writeln!(f, "Image save error: {}", e),
        }
    }
}

impl From<io::Error> for ConvertError {
    fn from(error: io::Error) -> Self {
        ConvertError::IO(error)
    }
}

impl From<ImageError> for ConvertError {
    fn from(error: ImageError) -> Self {
        ConvertError::Image(error)
    }
}

/// Output file format
enum Format {
    Bmp,
    Png,
    Tiff,
}

impl Format {
    fn extension(&self) -> String {
        match self {
            Format::Bmp => String::from("bmp"),
            Format::Png => String::from("png"),
            Format::Tiff => String::from("tiff"),
        }
    }
}

fn convert(src: &PathBuf, format: Format) -> Result<(), ConvertError> {
    let mut reader: BufReader<File> = match File::open(&src) {
        Err(why) => return Err(ConvertError::IO(why)),
        Ok(file) => BufReader::new(file),
    };
    let mut header = [0u8; 8];
    reader.read_exact(&mut header)?;
    let w = u16::from_le_bytes([header[0], header[1]]);
    let h = u16::from_le_bytes([header[2], header[3]]);
    let bpp = u16::from_le_bytes([header[4], header[5]]) & 0x7fff;
    let scanline = u16::from_le_bytes([header[6], header[7]]);
    if w < 1 || w > 8192 || h < 1 || h > 8192 {
        return Err(ConvertError::Format(format!(
            "File may not be a bitmap resource as w is {} and h is {}", w, h
        )));
    }
    if bpp != 8 {
        return Err(ConvertError::Format(format!(
            "Only 8bpp resources are supported, this is {}bpp",
            bpp
        )));
    }
    let mut image = RgbImage::new(w as u32, h as u32);

    let mut scanline = vec![0u8; scanline as usize];
    for y in 0..h {
        reader.read_exact(&mut scanline)?;
        for x in 0..w {
            let pixel = scanline[x as usize];
            let colour: Rgb<u8> = pixel_to_rgb(pixel);
            image.put_pixel(x as u32, y as u32, colour);
        }
    }

    let mut dst = PathBuf::from(src);
    dst.set_extension(format.extension());
    image.save(dst)?;

    Ok(())
}

fn main() {
    let args = command!()
        .about("Convert PocketBook theme image resources into normal formats")
        .author(crate_authors!("\n"))
        .version(crate_version!())
        .arg(
            Arg::new("bmp")
                .long("bmp")
                .action(ArgAction::SetTrue)
                .help("Write Windows BMP file"),
        )
        .arg(
            Arg::new("png")
                .long("png")
                .action(ArgAction::SetTrue)
                .help("Write PNG file"),
        )
        .arg(
            Arg::new("tiff")
                .long("tiff")
                .action(ArgAction::SetTrue)
                .help("Write TIFF file"),
        )
        .group(
            ArgGroup::new("format")
                .required(true)
                .args(["bmp", "png", "tiff"])
                .multiple(false),
        )
        .arg(
            Arg::new("resource-file")
                .value_parser(value_parser!(PathBuf))
                .required(true),
        )
        .get_matches();

    let format = if args.get_flag("bmp") {
        Format::Bmp
    } else if args.get_flag("tiff") {
        Format::Tiff
    } else {
        Format::Png
    };
    match convert(args.get_one("resource-file").unwrap(), format) {
        Ok(_) => std::process::exit(0),
        Err(e) => eprintln!("Failed {}", e),
    }
}
